
PI1_GPIO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000001dc  080001f0  080001f0  000011f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080003cc  080003d4  000013d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080003cc  080003cc  000013d4  2**0
                  CONTENTS
  4 .ARM          00000000  080003cc  080003cc  000013d4  2**0
                  CONTENTS
  5 .preinit_array 00000000  080003cc  080003d4  000013d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080003cc  080003cc  000013cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080003d0  080003d0  000013d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  000013d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  080003d4  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  080003d4  0000201c  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  000013d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000000cf  00000000  00000000  0000140a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000007a  00000000  00000000  000014d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000048  00000000  00000000  00001558  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000002d  00000000  00000000  000015a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00000f8e  00000000  00000000  000015cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000004f0  00000000  00000000  0000255b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00003d0d  00000000  00000000  00002a4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00006758  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000054  00000000  00000000  0000679c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  000067f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f0 <__do_global_dtors_aux>:
 80001f0:	b510      	push	{r4, lr}
 80001f2:	4c05      	ldr	r4, [pc, #20]	@ (8000208 <__do_global_dtors_aux+0x18>)
 80001f4:	7823      	ldrb	r3, [r4, #0]
 80001f6:	b933      	cbnz	r3, 8000206 <__do_global_dtors_aux+0x16>
 80001f8:	4b04      	ldr	r3, [pc, #16]	@ (800020c <__do_global_dtors_aux+0x1c>)
 80001fa:	b113      	cbz	r3, 8000202 <__do_global_dtors_aux+0x12>
 80001fc:	4804      	ldr	r0, [pc, #16]	@ (8000210 <__do_global_dtors_aux+0x20>)
 80001fe:	f3af 8000 	nop.w
 8000202:	2301      	movs	r3, #1
 8000204:	7023      	strb	r3, [r4, #0]
 8000206:	bd10      	pop	{r4, pc}
 8000208:	20000000 	.word	0x20000000
 800020c:	00000000 	.word	0x00000000
 8000210:	080003b4 	.word	0x080003b4

08000214 <frame_dummy>:
 8000214:	b508      	push	{r3, lr}
 8000216:	4b03      	ldr	r3, [pc, #12]	@ (8000224 <frame_dummy+0x10>)
 8000218:	b11b      	cbz	r3, 8000222 <frame_dummy+0xe>
 800021a:	4903      	ldr	r1, [pc, #12]	@ (8000228 <frame_dummy+0x14>)
 800021c:	4803      	ldr	r0, [pc, #12]	@ (800022c <frame_dummy+0x18>)
 800021e:	f3af 8000 	nop.w
 8000222:	bd08      	pop	{r3, pc}
 8000224:	00000000 	.word	0x00000000
 8000228:	20000004 	.word	0x20000004
 800022c:	080003b4 	.word	0x080003b4

08000230 <main>:
#define RCC_AHB2ENR *((volatile uint32_t *) (0x40021000 + 0x4C))
#define GPIOB_MODER *((volatile uint32_t *) 0x42020400)
#define GPIOB_ODR *((volatile uint32_t *) (0x42020400 + 0x14))
#define GPIOB_IDR *((volatile uint32_t *) (0x42020400 + 0x10))
int main(void)
{
 8000230:	b480      	push	{r7}
 8000232:	af00      	add	r7, sp, #0
	// Turn on the GPIO ports.
	 RCC_AHB2ENR|= (1 << 1);
 8000234:	4b34      	ldr	r3, [pc, #208]	@ (8000308 <main+0xd8>)
 8000236:	681b      	ldr	r3, [r3, #0]
 8000238:	4a33      	ldr	r2, [pc, #204]	@ (8000308 <main+0xd8>)
 800023a:	f043 0302 	orr.w	r3, r3, #2
 800023e:	6013      	str	r3, [r2, #0]

	 GPIOB_MODER &= ~(0x03 <<(11 * 2));		// PB11 as input mode
 8000240:	4b32      	ldr	r3, [pc, #200]	@ (800030c <main+0xdc>)
 8000242:	681b      	ldr	r3, [r3, #0]
 8000244:	4a31      	ldr	r2, [pc, #196]	@ (800030c <main+0xdc>)
 8000246:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800024a:	6013      	str	r3, [r2, #0]
	 GPIOB_MODER &= ~(0x03 <<(8 * 2));		// PB8 clear bits
 800024c:	4b2f      	ldr	r3, [pc, #188]	@ (800030c <main+0xdc>)
 800024e:	681b      	ldr	r3, [r3, #0]
 8000250:	4a2e      	ldr	r2, [pc, #184]	@ (800030c <main+0xdc>)
 8000252:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8000256:	6013      	str	r3, [r2, #0]
	 GPIOB_MODER |= (0x01 << (8 * 2));		// PB8 as output mode
 8000258:	4b2c      	ldr	r3, [pc, #176]	@ (800030c <main+0xdc>)
 800025a:	681b      	ldr	r3, [r3, #0]
 800025c:	4a2b      	ldr	r2, [pc, #172]	@ (800030c <main+0xdc>)
 800025e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000262:	6013      	str	r3, [r2, #0]

	 GPIOB_MODER &= ~(0x03 <<(9 * 2));		// PB9 as input mode
 8000264:	4b29      	ldr	r3, [pc, #164]	@ (800030c <main+0xdc>)
 8000266:	681b      	ldr	r3, [r3, #0]
 8000268:	4a28      	ldr	r2, [pc, #160]	@ (800030c <main+0xdc>)
 800026a:	f423 2340 	bic.w	r3, r3, #786432	@ 0xc0000
 800026e:	6013      	str	r3, [r2, #0]
	 GPIOB_MODER &= ~(0x03 <<(10 * 2));		// PB10 clear bits
 8000270:	4b26      	ldr	r3, [pc, #152]	@ (800030c <main+0xdc>)
 8000272:	681b      	ldr	r3, [r3, #0]
 8000274:	4a25      	ldr	r2, [pc, #148]	@ (800030c <main+0xdc>)
 8000276:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800027a:	6013      	str	r3, [r2, #0]
	 GPIOB_MODER |= (0x01 << (10 * 2));		// PB10 as output mode
 800027c:	4b23      	ldr	r3, [pc, #140]	@ (800030c <main+0xdc>)
 800027e:	681b      	ldr	r3, [r3, #0]
 8000280:	4a22      	ldr	r2, [pc, #136]	@ (800030c <main+0xdc>)
 8000282:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000286:	6013      	str	r3, [r2, #0]

	 GPIOB_MODER &= ~(0x03 <<(6 * 2));		// PB6 clear bits
 8000288:	4b20      	ldr	r3, [pc, #128]	@ (800030c <main+0xdc>)
 800028a:	681b      	ldr	r3, [r3, #0]
 800028c:	4a1f      	ldr	r2, [pc, #124]	@ (800030c <main+0xdc>)
 800028e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8000292:	6013      	str	r3, [r2, #0]
	 GPIOB_MODER |= (0x01 << (6 * 2));		// PB6 as output mode
 8000294:	4b1d      	ldr	r3, [pc, #116]	@ (800030c <main+0xdc>)
 8000296:	681b      	ldr	r3, [r3, #0]
 8000298:	4a1c      	ldr	r2, [pc, #112]	@ (800030c <main+0xdc>)
 800029a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800029e:	6013      	str	r3, [r2, #0]

	 GPIOB_ODR |= (1 << 6);
 80002a0:	4b1b      	ldr	r3, [pc, #108]	@ (8000310 <main+0xe0>)
 80002a2:	681b      	ldr	r3, [r3, #0]
 80002a4:	4a1a      	ldr	r2, [pc, #104]	@ (8000310 <main+0xe0>)
 80002a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80002aa:	6013      	str	r3, [r2, #0]

	 while(1) {
		 // If read value is 1 from PB11(Switch 1), turn on the buzzer.
		 if ((GPIOB_IDR & (1 << 11)) == 0) {
 80002ac:	4b19      	ldr	r3, [pc, #100]	@ (8000314 <main+0xe4>)
 80002ae:	681b      	ldr	r3, [r3, #0]
 80002b0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	d119      	bne.n	80002ec <main+0xbc>
			 GPIOB_ODR |= (1 << 8); // buzzer on
 80002b8:	4b15      	ldr	r3, [pc, #84]	@ (8000310 <main+0xe0>)
 80002ba:	681b      	ldr	r3, [r3, #0]
 80002bc:	4a14      	ldr	r2, [pc, #80]	@ (8000310 <main+0xe0>)
 80002be:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80002c2:	6013      	str	r3, [r2, #0]
			 if ((GPIOB_IDR & (1 << 9)) == 0){  // If read value is 1 from PB9(Switch 2), turn on the dc motor.
 80002c4:	4b13      	ldr	r3, [pc, #76]	@ (8000314 <main+0xe4>)
 80002c6:	681b      	ldr	r3, [r3, #0]
 80002c8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d106      	bne.n	80002de <main+0xae>
				 GPIOB_ODR |= (1 << 10);
 80002d0:	4b0f      	ldr	r3, [pc, #60]	@ (8000310 <main+0xe0>)
 80002d2:	681b      	ldr	r3, [r3, #0]
 80002d4:	4a0e      	ldr	r2, [pc, #56]	@ (8000310 <main+0xe0>)
 80002d6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80002da:	6013      	str	r3, [r2, #0]
 80002dc:	e7e6      	b.n	80002ac <main+0x7c>
			 }

			 else{
				 GPIOB_ODR &= ~(1 << 10); // If read value is 0 from PB9, turn off the dc motor.
 80002de:	4b0c      	ldr	r3, [pc, #48]	@ (8000310 <main+0xe0>)
 80002e0:	681b      	ldr	r3, [r3, #0]
 80002e2:	4a0b      	ldr	r2, [pc, #44]	@ (8000310 <main+0xe0>)
 80002e4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80002e8:	6013      	str	r3, [r2, #0]
 80002ea:	e7df      	b.n	80002ac <main+0x7c>

			 }
		 }
		 else{
			 // If read value is 0 from PB11, turn off buzzer and the motor.
			 GPIOB_ODR &= ~(1 << 8);
 80002ec:	4b08      	ldr	r3, [pc, #32]	@ (8000310 <main+0xe0>)
 80002ee:	681b      	ldr	r3, [r3, #0]
 80002f0:	4a07      	ldr	r2, [pc, #28]	@ (8000310 <main+0xe0>)
 80002f2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80002f6:	6013      	str	r3, [r2, #0]
			 GPIOB_ODR &= ~(1 << 10);
 80002f8:	4b05      	ldr	r3, [pc, #20]	@ (8000310 <main+0xe0>)
 80002fa:	681b      	ldr	r3, [r3, #0]
 80002fc:	4a04      	ldr	r2, [pc, #16]	@ (8000310 <main+0xe0>)
 80002fe:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8000302:	6013      	str	r3, [r2, #0]
		 if ((GPIOB_IDR & (1 << 11)) == 0) {
 8000304:	e7d2      	b.n	80002ac <main+0x7c>
 8000306:	bf00      	nop
 8000308:	4002104c 	.word	0x4002104c
 800030c:	42020400 	.word	0x42020400
 8000310:	42020414 	.word	0x42020414
 8000314:	42020410 	.word	0x42020410

08000318 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000318:	480d      	ldr	r0, [pc, #52]	@ (8000350 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800031a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800031c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000320:	480c      	ldr	r0, [pc, #48]	@ (8000354 <LoopForever+0x6>)
  ldr r1, =_edata
 8000322:	490d      	ldr	r1, [pc, #52]	@ (8000358 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000324:	4a0d      	ldr	r2, [pc, #52]	@ (800035c <LoopForever+0xe>)
  movs r3, #0
 8000326:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000328:	e002      	b.n	8000330 <LoopCopyDataInit>

0800032a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800032a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800032c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800032e:	3304      	adds	r3, #4

08000330 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000330:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000332:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000334:	d3f9      	bcc.n	800032a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000336:	4a0a      	ldr	r2, [pc, #40]	@ (8000360 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000338:	4c0a      	ldr	r4, [pc, #40]	@ (8000364 <LoopForever+0x16>)
  movs r3, #0
 800033a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800033c:	e001      	b.n	8000342 <LoopFillZerobss>

0800033e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800033e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000340:	3204      	adds	r2, #4

08000342 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000342:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000344:	d3fb      	bcc.n	800033e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000346:	f000 f811 	bl	800036c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800034a:	f7ff ff71 	bl	8000230 <main>

0800034e <LoopForever>:

LoopForever:
  b LoopForever
 800034e:	e7fe      	b.n	800034e <LoopForever>
  ldr   r0, =_estack
 8000350:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000354:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000358:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 800035c:	080003d4 	.word	0x080003d4
  ldr r2, =_sbss
 8000360:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000364:	2000001c 	.word	0x2000001c

08000368 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000368:	e7fe      	b.n	8000368 <ADC1_2_IRQHandler>
	...

0800036c <__libc_init_array>:
 800036c:	b570      	push	{r4, r5, r6, lr}
 800036e:	4d0d      	ldr	r5, [pc, #52]	@ (80003a4 <__libc_init_array+0x38>)
 8000370:	2600      	movs	r6, #0
 8000372:	4c0d      	ldr	r4, [pc, #52]	@ (80003a8 <__libc_init_array+0x3c>)
 8000374:	1b64      	subs	r4, r4, r5
 8000376:	10a4      	asrs	r4, r4, #2
 8000378:	42a6      	cmp	r6, r4
 800037a:	d109      	bne.n	8000390 <__libc_init_array+0x24>
 800037c:	4d0b      	ldr	r5, [pc, #44]	@ (80003ac <__libc_init_array+0x40>)
 800037e:	2600      	movs	r6, #0
 8000380:	4c0b      	ldr	r4, [pc, #44]	@ (80003b0 <__libc_init_array+0x44>)
 8000382:	f000 f817 	bl	80003b4 <_init>
 8000386:	1b64      	subs	r4, r4, r5
 8000388:	10a4      	asrs	r4, r4, #2
 800038a:	42a6      	cmp	r6, r4
 800038c:	d105      	bne.n	800039a <__libc_init_array+0x2e>
 800038e:	bd70      	pop	{r4, r5, r6, pc}
 8000390:	f855 3b04 	ldr.w	r3, [r5], #4
 8000394:	3601      	adds	r6, #1
 8000396:	4798      	blx	r3
 8000398:	e7ee      	b.n	8000378 <__libc_init_array+0xc>
 800039a:	f855 3b04 	ldr.w	r3, [r5], #4
 800039e:	3601      	adds	r6, #1
 80003a0:	4798      	blx	r3
 80003a2:	e7f2      	b.n	800038a <__libc_init_array+0x1e>
 80003a4:	080003cc 	.word	0x080003cc
 80003a8:	080003cc 	.word	0x080003cc
 80003ac:	080003cc 	.word	0x080003cc
 80003b0:	080003d0 	.word	0x080003d0

080003b4 <_init>:
 80003b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003b6:	bf00      	nop
 80003b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003ba:	bc08      	pop	{r3}
 80003bc:	469e      	mov	lr, r3
 80003be:	4770      	bx	lr

080003c0 <_fini>:
 80003c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003c2:	bf00      	nop
 80003c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003c6:	bc08      	pop	{r3}
 80003c8:	469e      	mov	lr, r3
 80003ca:	4770      	bx	lr
